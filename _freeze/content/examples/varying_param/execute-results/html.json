{
  "hash": "0880401f14c323beb16073fd3a32d16c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Example\"\neditor: visual\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(mediocrethemes)\nset_mediocre_all()\n```\n:::\n\n\ntext and blabla\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbaseline_param <- tibble(\n  n = 100,\n  p_treat = 0.5,\n  alpha_0 = 10,\n  beta_0 = 1,\n  sigma_u = 2\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngenerate_data <- function(n,\n                          p_treat,\n                          alpha_0,\n                          beta_0,\n                          sigma_u) {\n  tibble(\n    u = rnorm(n, 0, sigma_u),\n    treat = rbernoulli(n, p = p_treat),\n    grade = alpha_0 + beta_0 * treat + u,\n    grade_1 = alpha_0 + beta_0 + u,\n    grade_0 = alpha_0 + u,\n    indiv_effect = grade_1 - grade_0\n  )\n}\n\nex_data <- baseline_param |> \n  pmap(generate_data) |> \n  list_rbind()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: `rbernoulli()` was deprecated in purrr 1.0.0.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrun_estim <- function(data) {\n  lm(grade ~ treat, data = data) |> \n    summary() |> \n    broom::tidy(conf.int = TRUE, conf.level = 0.95) |> \n    filter(term == \"treatTRUE\") |> \n    select(-term)\n}\n\nex_data |> \n  run_estim()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 6\n  estimate std.error statistic p.value conf.low conf.high\n     <dbl>     <dbl>     <dbl>   <dbl>    <dbl>     <dbl>\n1    0.926     0.370      2.50  0.0139    0.192      1.66\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncompute_sim <- function(...) {\n  generate_data(...) %>% \n    run_estim() %>% \n    cbind(as_tibble(list(...))) |>  #add parameters used for generation\n    as_tibble()\n}\n\nbaseline_param |> \n  pmap(compute_sim) |> \n  list_rbind() \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 11\n  estimate std.error statistic p.value conf.low conf.high     n p_treat alpha_0\n     <dbl>     <dbl>     <dbl>   <dbl>    <dbl>     <dbl> <dbl>   <dbl>   <dbl>\n1     1.09     0.454      2.40  0.0185    0.187      1.99   100     0.5      10\n# ℹ 2 more variables: beta_0 <dbl>, sigma_u <dbl>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nn_iter <- 500\n\nparam <- baseline_param |> \n  uncount(n_iter)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nparam |> \n  pmap(compute_sim) |> \n  list_rbind()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 500 × 11\n   estimate std.error statistic p.value conf.low conf.high     n p_treat alpha_0\n      <dbl>     <dbl>     <dbl>   <dbl>    <dbl>     <dbl> <dbl>   <dbl>   <dbl>\n 1    0.584     0.386      1.51 1.34e-1  -0.183       1.35   100     0.5      10\n 2    0.737     0.346      2.13 3.55e-2   0.0511      1.42   100     0.5      10\n 3    1.32      0.388      3.41 9.51e-4   0.553       2.09   100     0.5      10\n 4    1.34      0.373      3.60 5.00e-4   0.602       2.08   100     0.5      10\n 5    1.29      0.495      2.61 1.06e-2   0.307       2.27   100     0.5      10\n 6    1.01      0.410      2.47 1.53e-2   0.198       1.82   100     0.5      10\n 7    1.04      0.417      2.50 1.41e-2   0.215       1.87   100     0.5      10\n 8    0.417     0.405      1.03 3.06e-1  -0.387       1.22   100     0.5      10\n 9    0.595     0.394      1.51 1.34e-1  -0.187       1.38   100     0.5      10\n10    0.994     0.456      2.18 3.16e-2   0.0894      1.90   100     0.5      10\n# ℹ 490 more rows\n# ℹ 2 more variables: beta_0 <dbl>, sigma_u <dbl>\n```\n\n\n:::\n:::\n\n\n## Varying param\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvect_n <- seq(from = 50, to = 300, by = 30)\nvect_beta <- seq(0.2, 2, by = 0.4)\n\nparam <- baseline_param |> \n  select(-n) |> \n  crossing(n = vect_n) |> \n  select(-beta_0) |> \n  crossing(beta_0 = vect_beta) |> \n  uncount(n_iter)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsim_res <- param |> \n  pmap(compute_sim, .progress = TRUE) |> \n  list_rbind()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n ■■■                                6% |  ETA:  1m\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n ■■■■                              10% |  ETA:  1m\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n ■■■■■                             15% |  ETA:  1m\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n ■■■■■■■                           20% |  ETA:  1m\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n ■■■■■■■■                          24% |  ETA: 50s\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n ■■■■■■■■■■                        29% |  ETA: 47s\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n ■■■■■■■■■■■                       33% |  ETA: 44s\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n ■■■■■■■■■■■■                      38% |  ETA: 41s\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n ■■■■■■■■■■■■■■                    42% |  ETA: 38s\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n ■■■■■■■■■■■■■■■                   47% |  ETA: 35s\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n ■■■■■■■■■■■■■■■■                  52% |  ETA: 32s\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n ■■■■■■■■■■■■■■■■■■                56% |  ETA: 29s\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n ■■■■■■■■■■■■■■■■■■■               61% |  ETA: 26s\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n ■■■■■■■■■■■■■■■■■■■■■             65% |  ETA: 23s\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n ■■■■■■■■■■■■■■■■■■■■■■            70% |  ETA: 20s\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n ■■■■■■■■■■■■■■■■■■■■■■■           74% |  ETA: 17s\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n ■■■■■■■■■■■■■■■■■■■■■■■■■         79% |  ETA: 14s\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n ■■■■■■■■■■■■■■■■■■■■■■■■■■        83% |  ETA: 11s\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n ■■■■■■■■■■■■■■■■■■■■■■■■■■■       88% |  ETA:  8s\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■     92% |  ETA:  5s\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■    97% |  ETA:  2s\n```\n\n\n:::\n\n```{.r .cell-code}\nbeepr::beep()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npower_res <- sim_res |> \n  mutate(signif = (p.value < 0.05)) |> \n  group_by(n, beta_0) |> \n  summarise(\n    power = mean(signif)\n  ) |> \n  ungroup()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'n'. You can override using the `.groups`\nargument.\n```\n\n\n:::\n:::\n\n\nGraph\n\n\n::: {.cell}\n\n```{.r .cell-code}\npower_res |> \n  filter(beta_0 == 1) |> \n  ggplot(aes(x = n, y = power)) + \n  geom_point() +\n  geom_line() + \n  labs(\n    title = \"Statistical Power as Function of Sample Size\",\n    subtitle = paste(\"Computed with\", n_iter, \"simulations\"),\n    x = \"Number of students\",\n    y = \"Statistical Power\"\n  )\n```\n\n::: {.cell-output-display}\n![](varying_param_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npower_res |> \n  ggplot(aes(x = n, y = power, color = as_factor(beta_0))) + \n  geom_point() +\n  geom_line() + \n  labs(\n    title = \"Statistical Power as Function of Sample Size\",\n    subtitle = paste(\"Computed with\", n_iter, \"simulations\"),\n    x = \"Number of students\",\n    y = \"Statistical Power\",\n    color = \"Effect size\"\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: The `scale_name` argument of `discrete_scale()` is deprecated as of ggplot2\n3.5.0.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](varying_param_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npower_res |> \n  filter(n == 140) |> \n  ggplot(aes(x = beta_0, y = power)) + \n  geom_point() +\n  geom_line() + \n  labs(\n    title = \"Statistical Power as Function of Effect size\",\n    subtitle = paste(\"Computed with\", n_iter, \"simulations\"),\n    x = \"Effect size\",\n    y = \"Statistical Power\"\n  )\n```\n\n::: {.cell-output-display}\n![](varying_param_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\\\n",
    "supporting": [
      "varying_param_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}